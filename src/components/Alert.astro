---
export interface Props {
  title?: string;
  message: string;
  type?: "error" | "warning" | "info";
  showRetry?: boolean;
}

const {
  title = "エラーが発生しました",
  message,
  type = "error",
  showRetry = true,
} = Astro.props;
---

<div class={`alert alert-${type}`}>
  <div class="alert-content">
    <div class="alert-icon">
      {type === "error" && <i class="fas fa-exclamation-triangle" />}
      {type === "warning" && <i class="fas fa-exclamation-circle" />}
      {type === "info" && <i class="fas fa-info-circle" />}
    </div>
    <div class="alert-text">
      <h4>{title}</h4>
      <p>{message}</p>
      {
        showRetry && (
          <div class="alert-actions">
            <button onclick="window.location.reload()" class="btn btn-outline">
              <i class="fas fa-sync-alt" />
              再試行
            </button>
            <a href="/" class="btn btn-outline">
              <i class="fas fa-home" />
              ホームに戻る
            </a>
          </div>
        )
      }
    </div>
  </div>
</div>

<style>
  .alert {
    border-radius: var(--radius-lg);
    padding: var(--spacing-6);
    margin: var(--spacing-5) 0;
    border: 1px solid var(--color-border);
    background: white;
    box-shadow: var(--shadow-sm);
  }

  .alert-error {
    border-left: 4px solid var(--color-gray-900);
  }

  .alert-warning {
    border-left: 4px solid var(--color-gray-600);
  }

  .alert-info {
    border-left: 4px solid var(--color-gray-400);
  }

  .alert-content {
    display: flex;
    align-items: flex-start;
    gap: var(--spacing-4);
  }

  .alert-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    background: var(--color-gray-100);
    border-radius: var(--radius-full);
    font-size: var(--text-lg);
    color: var(--color-gray-600);
    flex-shrink: 0;
  }

  .alert-text {
    flex: 1;
  }

  .alert-text h4 {
    margin: 0 0 var(--spacing-2) 0;
    font-size: var(--text-lg);
    font-weight: var(--font-semibold);
    color: var(--color-gray-900);
  }

  .alert-text p {
    margin: 0 0 var(--spacing-4) 0;
    line-height: 1.6;
    color: var(--color-gray-700);
  }

  .alert-actions {
    display: flex;
    gap: var(--spacing-3);
    flex-wrap: wrap;
  }

  .btn-outline {
    background: white;
    border: 1px solid var(--color-border);
    color: var(--color-gray-700);
    padding: var(--spacing-2) var(--spacing-4);
    font-size: var(--text-sm);
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-2);
    border-radius: var(--radius-md);
    font-weight: var(--font-medium);
    transition: var(--transition-base);
    cursor: pointer;
  }

  .btn-outline:hover {
    background: var(--color-gray-900);
    color: white;
    border-color: var(--color-gray-900);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }

  @media (max-width: 768px) {
    .alert {
      padding: var(--spacing-4);
      margin: var(--spacing-4) 0;
    }

    .alert-content {
      gap: var(--spacing-3);
    }

    .alert-icon {
      width: 2rem;
      height: 2rem;
      font-size: var(--text-base);
    }

    .alert-text h4 {
      font-size: var(--text-base);
    }

    .btn-outline {
      padding: var(--spacing-2) var(--spacing-3);
    }
  }
</style>
